name: s3-depl

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: REACT APP BUILD WITH (Node ${{ matrix.node-version}}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node-version: [12]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '12'
      - name: Set up Python 2.7
        uses: actions/setup-python@v4
        with:
          python-version: '2.7'
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Jfrog Artifactory
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: https://artifactory.coxautoinc.com/
          JF_USER: '${{ secrets.ARTIFACTORY_USER }}'
          JF_PASSWORD: '${{ secrets.ARTIFACTORY_TOKEN }}'
      - name: Build React App
        id: record-name-and-version-id
        run: |
            sudo apt-get install jq -y 
            APP_NAME=`cat package.json | jq -r .name`
            VERSION=`cat package.json | jq -r .version`
            npm install && npm run build && tar -czvf ${APP_NAME}.tar.gz build package.json
            ls -la
            cat << EOF > upload_spec.json 
            {
            "files": \[
              {
                "pattern": \"${APP_NAME}.tar.gz",
                "target": "dtfni-dt2-trunk-local/${APP_NAME}/${VERSION}/"
              }
                      \]
            }
            EOF
            aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }}/${APP_NAME}/${VERSION}  --exclude "*" --include "*.tar.gz" --delete
            #jf rt u "${APP_NAME}.tar.gz"  dtfni-dt2-trunk-local/${APP_NAME}/${VERSION}/${APP_NAME}.tar.gz 
            jf rt u -spec upload_spec.json
